" OS configuration
runtime! archlinux.vim

" Color
if has("syntax")
	syntax on
endif
filetype off

" Manage plugins with Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'      " Let vundle manage itself, required
Plugin 'Valloric/YouCompleteMe' " Use YouCompleteMe plugin
call vundle#end()
filetype plugin indent on

" Global configuration
set background=dark                  " Adapt colors to a dark background
set mouse=a                          " Enable use of mouse
set autoindent                       " Keep indent on new lines
set number                           " Print line numbers
set tabstop=4 shiftwidth=4 expandtab " Use 4 spaces instead of tabs
set hlsearch                         " Highlight search results
set incsearch                        " start searching while typing
set ignorecase                       " Ignore case ...
set smartcase                        " ... unless there is at least one maj
set listchars+=nbsp:.                " Show unbreacable spaces in list mode
set modeline                         " Read preferences integrated in files
set nocompatible                     " Use vim improvement, even when they break compatibility with vi
set completeopt=longest,menuone      " Complete configuration (TODO can be deleted with YCM ?)
set exrc                             " Allow local .vimrc files for project wide configuration
set secure                           " Restrict commands in project-wide .vimrc

" Doxygen coloration for files
au BufNewFile,BufRead *.doxygen setfiletype doxygen
au BufNewFile,BufRead *.dox setfiletype doxygen

" Tex coloration for class syntax
au BufNewFile,BufRead *.cls set ft=tex

" Txt2tags coloration
au BufNewFile,BufRead *.t2t set ft=txt2tags

" PDE (arduino IDE files) coloration
au BufNewFile,BufRead *.pde set ft=cpp
au BufNewFile,BufRead *.ino set ft=cpp

" GLSL coloration
au BufNewFile,BufRead *.frag,*.vert,*.glsl set ft=glsl

" FakeFS coloration
au BufNewFile,BufRead *.fakefs set ft=fakefs

" Mail detection
au BufNewFile,BufRead /home/*/mail/* set ft=mail

" Syntax check ...
setlocal spell spelllang=fr,en
" ... disabled by default
set nospell

" LaTeX shortcuts
au BufNewFile,BufRead *.tex iab bi \begin{itemize}
au BufNewFile,BufRead *.tex iab ei \end{itemize}
au BufNewFile,BufRead *.tex iab st \section
au BufNewFile,BufRead *.tex iab sst \subsection
au BufNewFile,BufRead *.tex iab ssst \subsubsection

" MSMTP config syntax coloration
au BufNewFile,BufRead .msmtprc set ft=msmtp

" Address completion with mutt (set omnifunc to be use by YCM)
au BufRead /tmp/mutt* source ~/.mutt/address-search.vim

" Filetype for reminders
au BufNewFile,BufRead ~/.remind/* set ft=remind

" Autocomplete popup window colors
highlight clear
highlight Pmenu      ctermfg=7 ctermbg=4
highlight PmenuSel   ctermfg=0 ctermbg=7
highlight PmenuSbar  ctermfg=7 ctermbg=0
highlight PmenuThumb ctermfg=0 ctermbg=7

" TagList configuration
let Tlist_Exit_OnlyWindow=1                     " Exit when the TagList window is the last one.
let tlist_txt2tags_settings='txt2tags;d:Titles' " Using txt2tags with taglist

" Using system clipboard
vmap <C-y> :!xclip -f <CR>
map <C-p> :r !xclip -o<CR>

" YouCompleteMe configuration
let g:ycm_filetype_blacklist = {
            \ 'tagbar'    : 1,
            \ 'qf'        : 1,
            \ 'notes'     : 1,
            \ 'markdown'  : 1,
            \ 'unite'     : 1,
            \ 'text'      : 1,
            \ 'vimwiki'   : 1,
            \ 'pandoc'    : 1,
            \ 'gitcommit' : 1
            \ }
let g:ycm_error_symbol   = 'X>' " Symbol to show on lines with errors
let g:ycm_warning_symbol = '>>' " Symbol to show on lines with warnings
let g:ycm_enable_diagnostic_highlighting = 0 " Do not highlight portion of texts with errors/warnings
let g:ycm_echo_current_diagnostic = 1 " When moving to a line with error/warning, echo it
let g:ycm_complete_in_comments = 1 " Make YCM complete even when typing in comments
let g:ycm_complete_in_strings = 0 " Prevent YCM from completing when in strings
let g:ycm_seed_identifiers_with_syntax = 1 " Make YCM add syntax keyword to completion
let g:ycm_key_list_select_completion = ['<TAB>'] " Use <Tab> to select a result in completion
let g:ycm_key_list_previous_completion = ['<S-TAB>'] " Use <S-Tab> to select backward
let g:ycm_confirm_extra_conf = 0 " Don't ask when opening a .ycm_extra_conf.py file
let g:ycm_cache_omnifunc = 0 " Don't cache omnifunc results, may slow down completion

" Color 80th column on ,8
set colorcolumn=0
let s:color_column_old=80

function! s:ToggleColorColumn()
    if s:color_column_old == 0
        let s:color_column_old = &colorcolumn
        windo let &colorcolumn = 0
    else
        windo let &colorcolumn = s:color_column_old
        let s:color_column_old = 0
    endif
endfunction

nnoremap ,8 :cal <SID>ToggleColorColumn()<cr>


